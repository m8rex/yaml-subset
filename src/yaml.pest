space = _{ " " | NEWLINE }
spaces = _{ space* }
hash_key = { (LETTER | NUMBER | "_")+ }
alias_name = { (LETTER | NUMBER | "_")+ }

number = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}
disallowed_unquoted_inline_string_start_elements = { "," | "[" | "]" | "{" | "}" | ": " | "\"" | "#" | NEWLINE }
disallowed_unquoted_inline_string_elements = { "," | "[" | "]" | "{" | "}" | ": " | "\"" | "#" | ">" | "|" | NEWLINE }
unquoted_inline_string_elements = { !(disallowed_unquoted_inline_string_elements) ~ ANY } 
unquoted_inline_string_start_elements = { !(disallowed_unquoted_inline_string_start_elements) ~ ANY } 
unquoted_inline_string = @{ unquoted_inline_string_start_elements ~ unquoted_inline_string_elements* }
disallowed_unquoted_string_start_elements = { "[" | "]" | "{" | "}" | ": " | "\"" | "#" | ">" | "|" | NEWLINE }
disallowed_unquoted_string_elements = { "[" | "]" | "{" | "}" | ": " | "\"" | "#" |  NEWLINE }
unquoted_string_elements = { !(disallowed_unquoted_string_elements) ~ ANY } 
unquoted_string_start_elements = { !(disallowed_unquoted_string_start_elements) ~ ANY } 
unquoted_string = @{ unquoted_string_start_elements ~ unquoted_string_elements* }
string_value = @{ (("\\" ~ ANY) | (!(PEEK) ~ ANY))* }
quoted_string = { PUSH("\"") ~ string_value ~ POP ~ SPACE_SEPARATOR* }
string = { unquoted_string | quoted_string }
inline_array_string = { unquoted_inline_string | quoted_string }

newline_with_newline_after = { !(NEWLINE ~ (!NEWLINE ~ ANY)) ~ NEWLINE}
blankline = { newline_with_newline_after+ }
block_string = @{ (!NEWLINE ~ ANY)+ | "" }
string_multiline_content = _{ blanknl ~ (PUSH(" "+) ~ block_string) ~ (NEWLINE ~ PEEK ~ block_string ~ blankline?)* ~ DROP }
string_multiline_folded = { ">" ~ string_multiline_content }
string_multiline_literal = { "|"  ~ string_multiline_content }

anchor = { "*" ~ alias_name }
alias = { "&" ~ alias_name }
inline_value = _{ (alias ~ spaces)? ~ (anchor | inline_array | inline_hash | string ) }
inline_array_value = _{ (alias ~ spaces)? ~ (anchor | inline_array | inline_hash | inline_array_string ) }

inline_array = _{ "[" ~ (spaces ~ inline_array_value ~ (spaces ~ "," ~ spaces ~ inline_array_value)*)? ~ spaces ~ "]" }
block_array_element = { "-" ~ SPACE_SEPARATOR+ ~ block_array_yaml_value }
block_array = _{ commentnl* ~ blank ~ PUSH(SPACE_SEPARATOR*) ~ block_array_element ~ comment? ~ SPACE_SEPARATOR* ~ (blank ~ commentnl* ~ PEEK ~ block_array_element ~ comment?)* ~ DROP ~ commentnl* }
array = { inline_array | block_array }
alternative_array = { block_array_element ~ comment? ~ blanknl ~ PUSH(SPACE_SEPARATOR*) ~ block_array_element ~ comment? ~ SPACE_SEPARATOR* ~ (blanknl ~ commentnl* ~ PEEK ~ block_array_element ~ comment?)* ~ DROP ~ commentnl* }

block_array_yaml_value = _{ alternative_yaml_value | yaml_value }
alternative_yaml_value = _{ (alias ~ spaces)? ~  (alternative_hash | alternative_array) }

yaml_value = _{ (alias ~ SPACE_SEPARATOR*)? ~ (hash | array | string_multiline_literal | string_multiline_folded | inline_value) }
hash_element = { hash_key ~ ":" ~ (SPACE_SEPARATOR+ | blanknl) ~ block_array_yaml_value}
hash = { commentnl* ~ blank ~ PUSH(SPACE_SEPARATOR*) ~ hash_element ~ comment? ~ (blanknl ~ commentnl* ~ PEEK ~ hash_element ~ comment?)* ~ DROP ~ commentnl* }

alternative_hash = { hash_element ~ comment? ~ blanknl ~ PUSH(SPACE_SEPARATOR*) ~ hash_element ~ comment? ~ (blanknl ~ commentnl* ~ PEEK ~ hash_element ~ comment?)* ~ DROP ~ commentnl* }


inline_hash = { "{" ~ spaces ~ "}" }

comment_text = { (!(NEWLINE) ~ ANY)* }
comment_base = _{ SPACE_SEPARATOR* ~ "#" ~ comment_text  }
commentnl = { (comment_base ~ blank) }
comment = { comment_base }

blank = _{ SPACE_SEPARATOR* ~ NEWLINE ~ (SPACE_SEPARATOR* ~ NEWLINE)+ | NEWLINE? }
blanknl = _{ SPACE_SEPARATOR* ~ NEWLINE ~ (SPACE_SEPARATOR* ~ NEWLINE)+ | NEWLINE }

document = { hash | array }
yaml = { SOI ~ "---" ~ blanknl ~ commentnl* ~ document ~ blank ~ (comment ~ blank)* ~ spaces ~ EOI }
